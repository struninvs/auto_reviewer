import pandas as pd
import numpy as np
import sys
import os
import streamlit as st
import json
import pyperclip
from string import Template
import markdownify

from pydantic import BaseModel
from typing import Union, Tuple
import graphviz

start_comment_student_template = Template("""<div style="border:solid green 2px; padding: 20px">
    
<font color='green' style='font-size:18px; font-weight:bold'>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${student_name}!</font>

–ú–µ–Ω—è –∑–æ–≤—É—Ç¬†–í–ª–∞–¥–∏—Å–ª–∞–≤ –∏ —è –±—É–¥—É –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–µ–≤—å—é —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—Ä–∞—â–∞—Ç—å—Å—è –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É –Ω–∞ ¬´—Ç—ã¬ª, –µ—Å–ª–∏ –¥–ª—è —Ç–µ–±—è —ç—Ç–æ –±—É–¥–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ. –ò–Ω–∞—á–µ –¥–∞–π –∑–Ω–∞—Ç—å, –∏ –º—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π–¥—ë–º –Ω–∞ ¬´–≤—ã¬ª.

–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å—Ç–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ Data Science. –¢–æ–±–æ–π –ø—Ä–æ–¥–µ–ª–∞–Ω–∞ –æ–≥—Ä–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –∏ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â–µ –ª—É—á—à–µ. –ù–∏–∂–µ —Ç—ã –Ω–∞–π–¥–µ—à—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - **–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–π, –Ω–µ –∏–∑–º–µ–Ω—è–π –∏ –Ω–µ —É–¥–∞–ª—è–π –∏—Ö**. –£–≤–∏–¥–µ–≤ —É —Ç–µ–±—è –æ—à–∏–±–∫—É, —è –ª–∏—à—å —É–∫–∞–∂—É –Ω–∞ –µ–µ –Ω–∞–ª–∏—á–∏–µ –∏ –¥–∞–º —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–µ. <br>
    
–ú–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≤ <font color='green'>–∑–µ–ª–µ–Ω–æ–π</font>, <font color='orange'>–∂—ë–ª—Ç–æ–π</font> –∏–ª–∏ <font color='red'>–∫—Ä–∞—Å–Ω–æ–π</font> —Ä–∞–º–∫–∞—Ö:<br>
<div class="alert alert-block alert-success">
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–≤–µ—Ä–∞ ‚úÖ:</b> –¢–∞–∫ —è –≤—ã–¥–µ–ª—è—é –≤–µ—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ–≥–¥–∞ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
</div>

<div class="alert alert-warning" role="alert">
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–≤–µ—Ä–∞ ‚ö†Ô∏è: </b> –¢–∞–∫ –≤—ã–¥–µ–ª–µ–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –Ø –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –∏—Ö —Ç—ã —Ç–æ–∂–µ —É—á—Ç–µ—à—å - —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç –æ—Ç —ç—Ç–æ–≥–æ —Å—Ç–∞–Ω–µ—Ç —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ.
</div>

<div class="alert alert-block alert-danger">
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–≤–µ—Ä–∞ ‚õîÔ∏è:</b> –ï—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –†–∞–±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ —Å –∫—Ä–∞—Å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
</div>

–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≤—å—é —Ä–∞–±–æ—Ç—ã –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–æ–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É –µ—â–µ –ª—É—á—à–µ –∏ –ø–æ–º–Ω–∏, —á—Ç–æ —É –Ω–∞—Å –æ–±—â–∞—è —Ü–µ–ª—å - –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–±—è –∫ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ Data Science —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!
</div>""")

start_comment_command_template = Template("""<div style="border:solid green 2px; padding: 20px">
    
<font color='green' style='font-size:18px; font-weight:bold'>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, ${student_name}!</font>

–ú–µ–Ω—è –∑–æ–≤—É—Ç¬†–í–ª–∞–¥–∏—Å–ª–∞–≤, —è –±—É–¥—É –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ä–µ–≤—å—é –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –º–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å –≤–∞–º —Å—Ç–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏ –ø–æ Data Science. –í–∞–º–∏ –ø—Ä–æ–¥–µ–ª–∞–Ω–∞ –æ–≥—Ä–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –∏ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –µ—â–µ –ª—É—á—à–µ. –ù–∏–∂–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - **–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–π—Ç–µ, –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –∏ –Ω–µ —É–¥–∞–ª—è–π—Ç–µ –∏—Ö**. –£–≤–∏–¥–µ–≤ —É –≤–∞—Å –æ—à–∏–±–∫—É, —è –ª–∏—à—å —É–∫–∞–∂—É –Ω–∞ –µ–µ –Ω–∞–ª–∏—á–∏–µ –∏ –¥–∞–º –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–µ. <br>
    
–ú–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –≤ <font color='green'>–∑–µ–ª–µ–Ω–æ–π</font>, <font color='orange'>–∂—ë–ª—Ç–æ–π</font> –∏–ª–∏ <font color='red'>–∫—Ä–∞—Å–Ω–æ–π</font> —Ä–∞–º–∫–∞—Ö:<br>
<div class="alert alert-block alert-success">
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–≤–µ—Ä–∞ ‚úÖ:</b> –¢–∞–∫ —è –≤—ã–¥–µ–ª—è—é –≤–µ—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ–≥–¥–∞ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
</div>

<div class="alert alert-warning" role="alert">
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–≤–µ—Ä–∞ ‚ö†Ô∏è: </b> –¢–∞–∫ –≤—ã–¥–µ–ª–µ–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. –Ø –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –∏—Ö –≤—ã —Ç–æ–∂–µ —É—á—Ç–µ—Ç–µ - –≤–∞–º –ø—Ä–æ–µ–∫—Ç –æ—Ç —ç—Ç–æ–≥–æ —Å—Ç–∞–Ω–µ—Ç —Ç–æ–ª—å–∫–æ –ª—É—á—à–µ.
</div>

<div class="alert alert-block alert-danger">
<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–≤–µ—Ä–∞ ‚õîÔ∏è:</b> –ï—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –†–∞–±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç–∞ —Å –∫—Ä–∞—Å–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏.
</div>

–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≤—å—é —Ä–∞–±–æ—Ç—ã –ø–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—Ç –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–æ–∏–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–¥–µ–ª–∞—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –µ—â–µ –ª—É—á—à–µ –∏ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —É –Ω–∞—Å –æ–±—â–∞—è —Ü–µ–ª—å - –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ Data Science —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º!
</div>""")

finish_comment_init = {
    "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞": "–®–∏–∫–∞—Ä–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, –æ–¥–Ω–æ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ —Ç–∞–∫–∏–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å:) –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –≤–¥—É–º—á–∏–≤—ã–µ –≤—ã–≤–æ–¥—ã, –Ω–∞–≥–ª—è–¥–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ ‚Äî –≤—Å–µ —Å—É–ø–µ—Ä! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–∏–ª–∏—è, —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ! –ó–¥–æ—Ä–æ–≤–æ, —á—Ç–æ —É–¥–∞–ª–æ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–¥–µ–ª–∏. –ù–∞–¥–µ—é—Å—å, —ç—Ç–æ—Ç –æ–ø—ã—Ç –±—ã–ª –ø–æ–ª–µ–∑–Ω—ã–º!",
    "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é - –ø—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ–ª—É—á–µ–Ω—ã —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –û—Å–Ω–æ–≤–Ω—ã–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π. –í –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å–æ–≤–µ—Ç—É—é –≤—Å–µ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å baseline –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –ø—É—Ç–∏ —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∫ –∫–∞–∫–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–∏–≤–æ–¥—è—Ç üòâ –ü—Ä–æ–µ–∫—Ç –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å: –≤ —Ç–µ—Ç—Ä–∞–¥–∫–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –≤—Å–µ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üòâ –£–≤–µ—Ä–µ–Ω –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!",
    "–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–∞–±–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ç–∞—Ä–∞–Ω–∏—è! –ü—Ä–æ–µ–∫—Ç –Ω–µ–º–Ω–æ–≥–æ —Å—ã—Ä–æ–π: —è—á–µ–π–∫–∏ –∫–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –±–ª–æ–∫–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç EDA –∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –Ω–µ–¥–æ—á–µ—Ç—ã –≤ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –≤—ã–≤–æ–¥–æ–≤. –í —Ç–µ—Ç—Ä–∞–¥–∫–µ –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–æ–≤–µ—Ç—ã –∫–∞–∫ –≤—Å–µ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã —á—É—Ç—å-—á—É—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üòâ –£–≤–µ—Ä–µ–Ω –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è!"
}

finish_comment_student_template = Template("""<div style="border:solid green 2px; padding: 40px">
<font color='green' style='font-size:24px; font-weight:bold'>–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</font><br><br>
${finish_comment_init}<br><br>
<b>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞</b>:
    ${success_comment}
<b>–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å</b>:
    ${error_comment}     
<b>–ù–∞ —á—Ç–æ –µ—â–µ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ</b>:
    ${attention_comment}<br>
    –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ. –ñ–µ–ª–∞—é —É–¥–∞—á–∏ –∏ –ø–æ–±–µ–¥ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö!üòâ
</div>""")

start_chat_gpt_template = Template("""–í—ã–ø–æ–ª–Ω–∏ —Ä–µ–≤—å—é –∫–æ–¥–∞:
${code}

–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –≤—ã–¥–µ–ª–∏ –æ—à–∏–±–∫–∏ –≤ –∫–æ–¥–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ö–æ—Ä–æ—à–æ, –∞ –Ω–∞ —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.""")

def session_state_init()-> bool:
    if "start_variables" not in st.session_state:
        st.session_state["start_variables"] = ["command_state", "student_name"]
    for variable in st.session_state["start_variables"]:
        if variable not in st.session_state:
            st.session_state[variable] = None
    return True

def get_student_name(tab)-> bool:
    with tab:
        st.radio(
            label = "–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –æ–¥–Ω–∏–º —Å—Ç—É–¥–µ–Ω—Ç–æ–º –∏–ª–∏ –≤ –∫–æ–º–∞–Ω–¥–µ?",
            options = ["–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏–ª –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç", "–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ"],
            horizontal = True,
            key = "command_state",
            index = 0
        )
        if st.session_state.command_state == "–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏–ª –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç":
            st.session_state["student_name"] = st.text_input(label = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞:", value = "–°—Ç—É–¥–µ–Ω—Ç")
        elif st.session_state.command_state == "–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω—è–ª—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ":
            st.session_state["student_name"] = st.text_input(label = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:", value = "–ö–æ–º–∞–Ω–¥–∞")
    return True if st.session_state.student_name else False

class WorkBook():
    def __init__(self)-> None:
        self.schema_df = None
        self.regular_sections = []
        self.special_sections_available = []
        return None
    
    def load_schema(self, file_path: str = os.path.dirname(os.path.realpath(__file__)) + "/template.xlsx")-> None:
        self.schema_df = pd.read_excel(file_path)        
        self.regular_sections = self.schema_df.loc[self.schema_df["is_special_block"] == 0, "Section"].unique().tolist()
        self.special_sections_available = self.schema_df.loc[self.schema_df["is_special_block"] == 1, "Section"].unique().tolist()
        return None
    
    def check_progress(self, tab_name)-> bool:
        if tab_name == "–û—Å–Ω–æ–≤–Ω–æ–µ":
            variable_list = st.session_state["start_variables"]
        else:
            variable_list = self.schema_df.loc[self.schema_df["Section"] == tab_name, "Key"].unique()
        for key in variable_list:
            if key not in st.session_state or st.session_state[key] == None:
                return False
        return True
    
    def get_start_comment(self)->None:
        if st.session_state["command_state"] == "–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–∏–ª –æ–¥–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç":
            comment = start_comment_student_template.substitute(st.session_state)
        else:            
            comment = start_comment_command_template.substitute(st.session_state)
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key = "copy_button_get_start_comment"):
            pyperclip.copy(comment)
        st.markdown(comment, unsafe_allow_html = True)
        st.text("")
        return None
    
    def get_finish_comment(self)->None:
        global finish_comment_init
        finish_comment_init = st.radio(
            label = "–í—ã–±–µ—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:",
            options = finish_comment_init.values(),
            captions = finish_comment_init.keys()
        )
        success_comment_list = []
        attention_comment_list = []
        error_comment_list = []
        for key in self.schema_df["Key"].unique():
            if key in st.session_state:
                cond = (self.schema_df["Key"] == key) & (self.schema_df["Answers"] == st.session_state[key])                
                success_comment = self.schema_df.loc[cond, "Success comment"]
                attention_comment = self.schema_df.loc[cond, "Attention comment"]
                error_comment = self.schema_df.loc[cond, "Error comment"]
                if success_comment.notna().values:
                    success_comment_list.append(str(success_comment.values[0]))
                if attention_comment.notna().values:
                    attention_comment_list.append(str(attention_comment.values[0]))
                if error_comment.notna().values:
                    error_comment_list.append(str(error_comment.values[0]))
        success_comment = "<ol>\n" + "\n".join([f"<li>{elem}</li>" for elem in success_comment_list]) + "</ol>"
        attention_comment = "<ol>\n" + "\n".join([f"<li>{elem}</li>" for elem in attention_comment_list]) + "</ol>"
        error_comment = "<ol>\n" + "\n".join([f"<li>{elem}</li>" for elem in error_comment_list]) + "</ol>"
        comment = finish_comment_student_template.substitute(
            {
                "finish_comment_init" : finish_comment_init,
                "success_comment" : success_comment,
                "attention_comment" : attention_comment,
                "error_comment" : error_comment
            }
        )        
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key = "copy_button_get_finish_comment"):
            pyperclip.copy(comment)
        st.markdown(comment, unsafe_allow_html = True)
        return None
    
    def get_summary(self)-> None:
        text = []
        for key in self.schema_df["Key"].unique():
            if key in st.session_state:
                summary = self.schema_df.loc[(self.schema_df["Key"] == key) & (self.schema_df["Answers"] == st.session_state[key]), "Summary"]
                if summary.notna().values:
                    text.append(str(summary.values[0]))
        text = "\n".join([f"{num + 1}. {elem};" for elem, num in zip(text, range(len(text)))])
        if st.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key = "copy_button_get_summary"):
            pyperclip.copy(text)
        st.markdown(text)
        st.text("")
        return None
    
    def get_code_analysis(self)-> None:
        notebook = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Ç—Ä–∞–¥—å —Å—Ç—É–¥–µ–Ω—Ç–∞', type='ipynb', accept_multiple_files = False)
        if notebook:
            content = json.loads(notebook.read())
            code = ""
            for cell in content["cells"]:
                if cell["cell_type"] == "code":
                    code += "".join(cell["source"])
            if st.button("–ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å ChatGPT", type = "primary"):
                pyperclip.copy(start_chat_gpt_template.substitute({"code" : code}))
            if st.button("–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º PEP8?"):
                pyperclip.copy("–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º PEP8?")
            if st.button('–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å "—É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö" –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π?'):
                pyperclip.copy('–í –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å "—É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö" –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–µ–π?')
            if st.button("–ù–∞–ø–∏—à–∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞?"):
                pyperclip.copy("–ù–∞–ø–∏—à–∏ —Å–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞?")
            if st.button("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?"):
                pyperclip.copy("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏?")
        return None
    
    def render_regular_tab(self, tab, tab_name)-> None:
        question_cond = self.schema_df["Section"] == tab_name
        for question in self.schema_df.loc[question_cond, "Question"].unique():
            answer_cond = (question_cond) & (self.schema_df["Question"] == question)
            answers =  self.schema_df.loc[answer_cond, "Answers"].values
            key = self.schema_df.loc[answer_cond, "Key"].values[0]
            tab.radio(
                label = question,
                options = answers,
                index = None,
                horizontal = True,
                key = key
            )
            if self.schema_df.loc[answer_cond, "Tip"].nunique() > 0:
                tip = self.schema_df.loc[(answer_cond) & (self.schema_df["Answers"] == st.session_state[key]), "Tip"]
                if tip.notna().values:
                    if tab.button("–ü–æ–¥—Å–∫–∞–∑–∫–∞!", key = "tip_button_" + key):
                        pyperclip.copy(tip.values[0])
                else:
                    tab.button("–ü–æ–¥—Å–∫–∞–∑–∫–∞!", disabled = True, key = "tip_button_" + key)
        return None
    
    def render_general_tab(self, tab)-> None:
        get_student_name(tab)
        return None
    
    def render_stack_tab(self, tab)-> None:        
        special_sections_choosen = tab.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:",
            self.special_sections_available
        )
        for special_section in special_sections_choosen:
            self.render_regular_tab(tab, special_section)
        return None        
    
    def render_tabs(self)-> None:
        tabs_names = ["–û—Å–Ω–æ–≤–Ω–æ–µ"] + self.regular_sections
        tab_labels = []
        for tab_name in tabs_names:
            if self.check_progress(tab_name):
                tab_labels.append(tab_name + "‚úÖ")
            else:
                tab_labels.append(tab_name + "‚õî")
        tabs_names += ["–°—Ç–µ–∫"]
        tab_labels += ["–°—Ç–µ–∫"]
        for tab, name in zip(st.tabs(tab_labels), tabs_names):
            if name == "–û—Å–Ω–æ–≤–Ω–æ–µ":
                self.render_general_tab(tab)
            elif name == "–°—Ç–µ–∫":
                self.render_stack_tab(tab)
            else:
                self.render_regular_tab(tab, name)
        return None
    
    def render_expanders(self)->None:
        st.divider()
        with st.expander("–ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞"):
            self.get_code_analysis()
        with st.expander("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
            self.get_start_comment()
        with st.expander("–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
            self.get_finish_comment()
        with st.expander("SUMMARY"):
            self.get_summary()

def main()-> None:
    st.title("Let's make _review_ :green[easier] :sunglasses:")
    session_state_init()
    wb = WorkBook()
    wb.load_schema()
    wb.render_tabs()
    wb.render_expanders()
    return None

if __name__ == "__main__":
    main()